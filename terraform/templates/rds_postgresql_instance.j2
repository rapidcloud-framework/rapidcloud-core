data "aws_secretsmanager_secret" "{{ profile }}_{{ resource_name }}_{{ resource_type }}" {
    name = "{{ params['database_password'] }}"
}

data "aws_secretsmanager_secret_version" "{{ profile }}_{{ resource_name }}_{{ resource_type }}" {
    secret_id = "${data.aws_secretsmanager_secret.{{ profile }}_{{ resource_name }}_{{ resource_type }}.id}"
}

module "{{ profile }}_{{ resource_name }}_{{ resource_type }}" {
    source        = "../modules/{{ resource_type }}"
    instance_name   = "${replace("{{ resource_name }}", "_", "-")}"
    database_name = "{{ params['resource_name'] | default('test')}}"
    db_subnets = data.aws_subnets.private.ids
    sg_enable_self = true
    multi_az =  {{ params['multi_az'] | default('false')}}
    vpc_id            = "{{ vpc }}"
    database_username = "{{ params['database_username']}}"
    database_password = data.aws_secretsmanager_secret_version.{{ profile }}_{{ resource_name }}_{{ resource_type }}.secret_string
    allocated_storage = "{{ params['allocated_storage']}}"
    max_allocated_storage = "{{ params['max_allocated_storage'] | default(0)}}"
    engine_version = "{{ params['engine_version']}}"
    instance_class = "{{ params['instance_class']}}"
    param_group_family = "{{ params['param_group_family']}}"
    allowed_ips = split(",", "{{ params['allowed_ips']}}")
    {% if params['parameters'] is defined %}
    parameters = [
    {% for k, v in  params['parameters'].items() %}
        {
        name = "{{ k }}"
        value = "{{ v }}"
        },
    {% endfor %}
    ]
    {% endif %}

    tags = {
    "Name" = "${replace("{{ profile }}_{{ resource_name }}", "_", "-")}"
       "env" = "{{ env }}"
       "profile" = "{{ name }}"
       "workload" = "{{ workload }}"
       "client" = "{{ client }}"
       "author" = "rapid-cloud"
    }
}

# data "aws_db_instance" "{{ profile }}_{{ resource_name }}_{{ resource_type }}" {
#   db_instance_identifier = "${replace("{{ profile }}_{{ resource_name }}", "_", "-")}"
#   depends_on = [module.{{ profile }}_{{ resource_name }}_{{resource_type}}.id]
# }

resource "aws_secretsmanager_secret" "{{ profile }}_{{ resource_name }}_{{ resource_type }}_conn" {
  description     = "{{ profile }}_{{ resource_name }}_{{ resource_type }} connection string"
  kms_key_id      = aws_kms_key.{{ profile }}.arn
  name            = "{{ profile }}/{{ resource_type }}/{{ resource_name }}/connection_string"
  depends_on = [module.{{ profile }}_{{ resource_name }}_{{resource_type}}.id]
}

resource "aws_secretsmanager_secret_version" "{{ profile }}_{{ resource_name }}_{{ resource_type }}_conn" {
  secret_id     = aws_secretsmanager_secret.{{ profile }}_{{ resource_name }}_{{ resource_type }}_conn.id
  secret_string = jsonencode({
    "host"=split(":", module.{{ profile }}_{{ resource_name }}_{{ resource_type }}.endpoint)[0],
    "port"="${module.{{ profile }}_{{ resource_name }}_{{ resource_type }}.port}",
    "user"="{{ params['database_username']}}",
    "password"="${data.aws_secretsmanager_secret_version.{{ profile }}_{{ resource_name }}_{{ resource_type }}.secret_string}",
    "dbname"="{{ params['database_name'] | default('test')}}",
})
    depends_on = [module.{{ profile }}_{{ resource_name }}_{{resource_type}}.id]
}

resource "aws_glue_connection" "{{ profile }}_{{ resource_name }}_{{ resource_type }}_conn" {
  connection_properties = {
    JDBC_CONNECTION_URL = "jdbc:postgresql://${module.{{ profile }}_{{ resource_name }}_{{ resource_type }}.endpoint}/{{ params['database_name'] | default('test')}}"
    JDBC_ENFORCE_SSL    = "false"
    USERNAME            = "{{ params['database_username']}}"
    PASSWORD            = data.aws_secretsmanager_secret_version.{{ profile }}_{{ resource_name }}_{{ resource_type }}.secret_string
  }

  name = "{{ profile }}_{{ resource_name }}_{{ resource_type }}"

  physical_connection_requirements {
    availability_zone      = data.aws_subnet.private[tolist(data.aws_subnets.private.ids)[0]].availability_zone
    security_group_id_list = [module.{{ profile }}_{{ resource_name }}_{{ resource_type }}.sg_id]
    subnet_id              = tolist(data.aws_subnets.private.ids)[0]
  }
}
