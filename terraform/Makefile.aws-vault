.ONESHELL:
SHELL := /bin/bash
.PHONY: help
AWS_VAULT_ACCT="kc-bigdata"
STS_TTL="1h"




help:
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

kc-init-debug: ## build infra from dynamo source with debug output
		@git pull && aws-vault exec $(AWS_VAULT_ACCT) -- ./bin/kc-init.py --table aws_infra --profile ${p} --debug

kc-init: ## build infra from dynamo source
		@git pull && aws-vault exec $(AWS_VAULT_ACCT) -- ./bin/kc-init.py --table aws_infra --profile ${p}

init: kc-init ## init terraform
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session -- terraform init

refresh: ## refresh the state metadata
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session -- terraform refresh

plan: init
	@echo "using account $(AWS_VAULT_ACCT)"
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session -- terraform plan  | tee .plan.txt

plan-target: init ## run a plan on a specific module using t=target.module
	@[ "${t}" ] && echo "planning target ${t}" || ( echo "no target provided"; exit 1 )
	@echo "---------------------------------------------"
	@aws-vault exec $(AWS_VAULT_ACCT))  -- terraform plan \
		-input=true \
		-refresh=true \
		-target=${t}

plan-summary: init ## Shows what a plan looks like for applying a specific resource
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session  -- terraform plan -no-color \
		         -input=true \
				 -refresh=true \
				 -out .plan.out  > .plan.txt
	@echo "grepping for goodies in .plan.txt" && \
		echo "-------------------" && \
		grep -E '^.*#'  .plan.txt --color=none || true && \
		echo "-------------------" && \
		grep -E '^Plan:' .plan.txt || true


plan-destroy: ## Creates a destruction plan.
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session  -- terraform plan  -out .plan.out


destroy-target: init ## destroy specific module using t=target.module
	@[ "${t}" ] && echo "destroying target ${t}" || ( echo "no target provided"; exit 1 )
	@echo "---------------------------------------------"
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session -- terraform destroy \
		-refresh=true \
		-target=${t}

destroy: ## executes a destruction plan.
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session  -- terraform destroy

show:
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session  -- terraform show -module-depth=-1

graph: ## Output the `dot` graph of all the built Terraform resources
	@rm -f graph.png
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session  -- terraform graph -draw-cycles -module-depth=-1 | dot -Tpng > graph.png

papply: init ## apply all resources normally
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session  -- terraform apply

apply-noinit: ## apply all resources without init first
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session  -- terraform apply

apply: init ## apply all resources but one at a time (-parallelism=1) use for initial dms
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session  -- terraform apply -parallelism=1

apply-target: init
	@[ "${t}" ] && echo "applying target ${t}" || ( echo "no target provided"; exit 1 )
	@echo "---------------------------------------------"
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session -- terraform apply \
		-refresh=true \
		-target=${t}

output: ## display outputs
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session  -- terraform output

force-unlock: ## force unlock a dynamo state lock table, provide l=xxx-lock-id
	@[ "${lock}" ] && echo "unlocking ${lock}" || ( echo "no lock id provided"; exit 1 )
	@aws-vault exec $(AWS_VAULT_ACCT) --no-session  -- terraform force-unlock ${lock}
